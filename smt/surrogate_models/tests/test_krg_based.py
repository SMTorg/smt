"""
Author: Remi Lafage <<remi.lafage@onera.fr>>

This package is distributed under New BSD license.
"""

import unittest

import numpy as np

from smt.problems import Rosenbrock
from smt.sampling_methods import LHS
from smt.surrogate_models import KRG, SGP
from smt.surrogate_models.krg_based import KrgBased
from smt.utils.misc import compute_rms_error


# defining the toy example
def target_fun(x):
    return np.cos(5 * x)


class TestKrgBased(unittest.TestCase):
    def test_theta0_default_init(self):
        krg = KrgBased()
        krg.set_training_values(np.array([[1, 2, 3]]), np.array([[1]]))
        krg._check_param()
        self.assertTrue(np.array_equal(krg.options["theta0"], [1e-2, 1e-2, 1e-2]))

    def test_theta0_one_dim_init(self):
        krg = KrgBased(theta0=[2e-2])
        krg.set_training_values(np.array([[1, 2, 3]]), np.array([[1]]))
        krg._check_param()
        self.assertTrue(np.array_equal(krg.options["theta0"], [2e-2, 2e-2, 2e-2]))

    def test_theta0_erroneous_init(self):
        krg = KrgBased(theta0=[2e-2, 1e-2])
        krg.set_training_values(np.array([[1, 2]]), np.array([[1]]))  # correct
        krg._check_param()
        krg.set_training_values(np.array([[1, 2, 3]]), np.array([[1]]))  # erroneous
        self.assertRaises(ValueError, krg._check_param)

    def test_multiple_training_outputs_warning(self):
        krg = KrgBased()
        with self.assertWarns(UserWarning):
            krg.set_training_values(np.array([[1, 2, 3]]), np.array([[1, 1]]))

    def test_less_almost_squar_exp(self):
        nobs = 50  # number of obsertvations
        np.random.seed(0)  # a seed for reproducibility
        xt = np.random.uniform(size=nobs)  # design points

        # adding a random noise to observations
        yt = target_fun(xt) + np.random.normal(scale=0.05, size=nobs)

        # training the model with the option eval_noise= True
        sm = KRG(eval_noise=False, corr="pow_exp", pow_exp_power=1.99)
        sm.set_training_values(xt, yt)
        sm.train()

        # predictions
        x = np.linspace(0, 1, 500).reshape(-1, 1)
        sm.predict_values(x)  # predictive mean
        sm.predict_variances(x)  # predictive variance
        sm.predict_derivatives(x, 0)  # predictive variance
        self.assertLess(
            np.abs(
                sm.predict_derivatives(x[20], 0)
                - (sm.predict_values(x[20] + 1e-6) - sm.predict_values(x[20])) / 1e-6
            ),
            1.01e-2,
        )

    def test_non_normal_database(self):
        xt = np.array(
            [
                [1.64460920e03, 6.57954159e-01, 6.00000000e00, 3.37153417e-01],
                [7.89485016e03, 7.69320782e-01, 1.50000000e01, 1.58285513e-01],
                [2.80904458e03, 2.82103879e-01, 1.40000000e01, 1.28907573e-01],
                [5.69393185e03, 2.15246472e-01, -1.00000000e00, 8.41826501e-01],
                [1.55485700e02, 6.32936802e-01, -1.00000000e00, 7.18299200e-01],
                [9.80119308e03, 5.57621083e-01, 1.70000000e01, 7.88561578e-01],
                [9.60882606e03, 2.57538726e-01, -2.30000000e01, 6.56179784e-01],
                [3.56539790e02, 5.02703552e-01, 8.00000000e00, 1.51127071e-01],
                [1.02087355e04, 4.94310549e-01, 1.40000000e01, 7.09171484e-01],
                [1.46374904e03, 3.65701955e-01, -2.80000000e01, 2.35687393e-01],
                [3.02788087e03, 3.44094324e-01, 1.60000000e01, 9.68530289e-01],
                [6.46569541e03, 3.04602525e-01, -2.80000000e01, 9.57104599e-01],
                [1.00729938e04, 5.38617379e-01, -3.20000000e01, 9.67049344e-01],
                [9.09698275e03, 2.89272792e-01, -7.00000000e00, 4.90990899e-01],
                [2.41015032e01, 6.12802001e-01, 2.20000000e01, 6.80065939e-01],
                [5.56043926e03, 6.98076395e-01, 2.20000000e01, 1.70696540e-01],
                [5.88913747e03, 5.98135995e-01, -0.00000000e00, 8.98513941e-01],
                [5.17800625e03, 3.53775173e-01, 1.40000000e01, 7.53938997e-01],
                [8.19445516e03, 4.30278970e-01, -2.00000000e01, 3.89594833e-01],
                [1.71452632e03, 4.97549295e-01, 4.00000000e00, 5.56559385e-01],
                [8.15633088e03, 3.99638448e-01, -2.50000000e01, 2.77146650e-01],
                [2.21998925e02, 5.16449350e-01, -2.00000000e01, 6.66648506e-01],
                [1.44242218e03, 5.97947706e-01, 2.10000000e01, 9.90127015e-01],
                [1.24040055e03, 3.73821879e-01, 1.90000000e01, 3.45917005e-01],
                [3.30598743e03, 3.24907538e-01, 1.00000000e01, 1.50200729e-01],
                [7.16305682e03, 6.57219098e-01, -7.00000000e00, 1.85077239e-01],
                [5.02707927e03, 6.49992389e-01, 1.80000000e01, 5.43516318e-01],
                [8.70688340e03, 2.24201051e-01, -2.50000000e01, 8.96620404e-01],
                [3.08931181e03, 5.74381514e-01, -5.00000000e00, 1.45104532e-01],
                [7.82098793e03, 2.74351999e-01, 1.00000000e00, 5.48370826e-01],
                [7.49557529e03, 5.17638452e-01, -3.30000000e01, 4.77343780e-01],
                [3.49451117e03, 3.69083599e-01, 1.40000000e01, 7.13887804e-01],
                [3.57001984e03, 6.78990167e-01, -1.80000000e01, 6.58025575e-01],
                [1.04339236e04, 2.56464376e-01, 2.10000000e01, 6.41430009e-01],
                [6.66304197e03, 7.20556909e-01, 2.10000000e01, 5.59102430e-01],
                [1.01379447e04, 3.98353705e-01, 1.30000000e01, 5.70826796e-01],
                [8.18743024e03, 2.76609477e-01, 1.50000000e01, 1.86305486e-01],
                [8.80119871e03, 4.65398110e-01, -1.70000000e01, 5.19161333e-01],
                [4.33803874e03, 2.48973929e-01, -2.60000000e01, 3.41345977e-01],
                [4.81455813e03, 6.29331424e-01, -1.30000000e01, 4.47942790e-01],
                [4.27393820e03, 4.10967935e-01, -1.20000000e01, 6.18960682e-01],
                [1.06161339e04, 3.93465474e-01, 2.20000000e01, 8.05952863e-01],
                [1.89425463e03, 2.61726305e-01, 1.50000000e01, 7.23692202e-01],
                [1.02689838e04, 3.07964460e-01, 1.60000000e01, 3.18908008e-01],
                [4.47256188e03, 5.01164307e-01, 7.00000000e00, 8.80692660e-01],
                [4.52379150e03, 2.65320922e-01, 1.30000000e01, 5.94331010e-01],
                [4.94087214e03, 4.80676842e-01, -7.00000000e00, 2.44056232e-01],
                [3.98687855e03, 7.40263259e-01, 1.90000000e01, 6.72733410e-01],
                [4.96604041e03, 4.31336013e-01, 2.40000000e01, 8.91973090e-01],
                [3.75175013e02, 3.04627351e-01, -1.00000000e01, 6.28258949e-01],
                [8.99020841e02, 6.67185383e-01, 2.00000000e01, 8.59253027e-01],
                [7.81453081e03, 5.83226568e-01, 8.00000000e00, 8.68227413e-01],
                [6.78698153e03, 5.55792366e-01, 4.00000000e00, 8.74812580e-01],
                [2.97720292e02, 2.71851650e-01, -3.00000000e00, 1.76413713e-01],
                [3.20221420e03, 4.03894097e-01, 2.20000000e01, 4.21516391e-01],
                [2.35605469e03, 4.74397885e-01, -1.30000000e01, 2.88233468e-01],
                [5.86953289e02, 4.19463474e-01, -2.70000000e01, 9.85033332e-01],
                [5.58198908e03, 3.28715726e-01, -3.20000000e01, 7.04694468e-01],
                [4.44183150e03, 3.31590568e-01, 1.40000000e01, 9.18919801e-01],
                [5.14397623e02, 2.82840324e-01, -3.00000000e00, 6.00453051e-01],
                [6.10641137e03, 6.23066570e-01, -2.10000000e01, 3.38929028e-01],
                [8.57191563e03, 2.71346733e-01, -1.50000000e01, 1.98514423e-01],
                [1.21190314e03, 3.85471225e-01, 5.00000000e00, 5.08302136e-01],
                [2.95628644e03, 4.27162580e-01, 1.00000000e01, 6.50866021e-01],
                [6.84542188e03, 2.22005907e-01, -3.00000000e01, 7.24328615e-01],
                [5.25652157e03, 2.89906546e-01, 2.00000000e00, 9.80742189e-01],
                [5.40394022e03, 2.98976424e-01, 1.00000000e00, 1.94734665e-01],
                [4.92264469e03, 6.46781079e-01, 1.30000000e01, 4.79754436e-01],
                [9.54511911e03, 3.38735154e-01, -2.20000000e01, 9.22809832e-01],
                [6.46243643e03, 6.33358651e-01, -2.60000000e01, 5.69492831e-01],
                [6.43659757e03, 4.01546627e-01, 1.00000000e01, 7.12855181e-01],
                [4.73522496e03, 5.83503754e-01, -1.20000000e01, 8.63800269e-01],
                [5.12113908e03, 5.79641320e-01, -2.80000000e01, 5.57380447e-01],
                [9.47795822e03, 3.35126047e-01, -9.00000000e00, 8.43324741e-01],
                [2.22428321e03, 4.44165367e-01, 1.30000000e01, 2.94105444e-01],
                [1.00767950e04, 5.92395239e-01, -1.40000000e01, 7.35022875e-01],
                [7.83778429e02, 5.51100266e-01, -2.30000000e01, 3.99264849e-01],
                [6.34908641e03, 5.53034694e-01, 1.10000000e01, 8.22541209e-01],
                [3.32319624e02, 2.22900385e-01, -3.10000000e01, 4.13539573e-01],
                [7.09696629e03, 7.25152854e-01, -3.00000000e01, 7.28388089e-01],
                [6.79962846e03, 7.15652701e-01, -3.40000000e01, 8.43394779e-01],
                [9.20077835e03, 3.03635144e-01, 1.30000000e01, 8.57669746e-01],
                [1.00453911e04, 4.24984046e-01, -1.40000000e01, 3.23283347e-01],
                [4.75394941e03, 7.26428065e-01, -2.30000000e01, 9.95906212e-01],
                [7.14710802e03, 4.62236299e-01, -3.50000000e01, 1.03848799e-01],
                [9.86075990e03, 4.51310019e-01, -1.90000000e01, 4.66239254e-01],
                [6.60800954e03, 6.11575116e-01, -2.70000000e01, 3.96984466e-01],
                [3.44134460e03, 2.93323240e-01, 1.80000000e01, 9.58863867e-01],
                [3.40817329e03, 7.00976059e-01, -2.90000000e01, 6.08964144e-01],
                [3.10925992e03, 2.08040297e-01, 1.10000000e01, 7.69564634e-01],
                [1.02137291e04, 2.42974061e-01, -4.00000000e00, 4.26312179e-01],
                [4.33076360e03, 4.18031131e-01, -3.30000000e01, 2.67305868e-01],
                [1.00978575e04, 3.44630843e-01, -2.30000000e01, 1.23953560e-01],
                [9.14450888e03, 4.97321540e-01, -1.50000000e01, 2.16777359e-01],
                [7.34948034e03, 2.83218549e-01, -1.30000000e01, 4.08861797e-01],
                [3.50760506e01, 5.72160191e-01, -1.70000000e01, 7.54773418e-01],
                [9.60230413e03, 5.12681192e-01, 4.00000000e00, 5.16422114e-01],
                [9.81311844e03, 6.81350222e-01, -3.00000000e01, 7.30971836e-01],
                [6.30410084e01, 3.56092447e-01, -3.00000000e01, 6.22367660e-01],
                [6.85873615e03, 2.99212319e-01, -3.00000000e00, 4.06856597e-01],
                [4.10949475e03, 5.05331003e-01, -1.70000000e01, 5.38507919e-01],
                [6.35537453e03, 3.40276137e-01, 5.00000000e00, 5.47247856e-01],
                [6.51608967e03, 4.64604185e-01, -1.80000000e01, 2.53232975e-01],
                [6.39673750e03, 2.67559567e-01, 6.00000000e00, 5.57337258e-01],
                [3.33144568e03, 5.47887844e-01, 1.80000000e01, 9.31460053e-01],
                [7.45412362e02, 6.85248238e-01, -1.40000000e01, 6.54269591e-01],
                [8.54223281e03, 7.29152509e-01, -2.00000000e01, 8.47390838e-01],
                [9.72317845e03, 7.51363702e-01, 1.00000000e01, 9.56375337e-01],
                [2.07678894e03, 5.37287034e-01, -2.70000000e01, 1.04228403e-01],
                [2.24676229e03, 4.98520377e-01, -4.00000000e00, 6.94833739e-01],
                [4.02653827e03, 6.50495403e-01, 2.10000000e01, 4.45865284e-01],
                [4.29757404e03, 5.89816449e-01, -1.80000000e01, 9.13521872e-01],
                [9.44307564e03, 2.94996774e-01, 1.00000000e01, 6.47732723e-01],
                [2.15658254e03, 4.47983846e-01, -1.10000000e01, 4.28634381e-01],
                [4.47005018e03, 2.89547743e-01, 1.60000000e01, 2.06165287e-01],
                [6.91242846e03, 5.28686926e-01, 1.00000000e01, 1.44947659e-01],
                [5.45820702e03, 4.95279792e-01, -3.40000000e01, 7.45631853e-01],
                [3.56132496e03, 4.63191539e-01, 1.90000000e01, 9.54006750e-01],
                [8.30475459e03, 7.74786538e-01, -2.50000000e01, 4.60043412e-01],
                [1.44482202e03, 7.22085000e-01, 1.80000000e01, 3.53934753e-01],
                [2.04517052e03, 2.87826952e-01, -1.10000000e01, 1.67931729e-01],
                [4.29482103e03, 5.52451356e-01, -3.20000000e01, 7.73105532e-01],
                [8.39405676e03, 4.77358502e-01, 1.80000000e01, 2.07459410e-01],
                [2.70762581e03, 6.80602179e-01, 3.00000000e00, 5.99057750e-01],
                [1.16799047e03, 7.39066762e-01, -1.80000000e01, 5.86540277e-01],
                [9.92845172e03, 6.80683763e-01, 1.70000000e01, 3.45929183e-01],
                [1.34829954e03, 2.15524881e-01, -2.00000000e01, 8.80605772e-01],
                [6.45419750e03, 7.16357075e-01, -1.50000000e01, 4.97232891e-01],
                [3.09502082e03, 2.95293118e-01, -2.00000000e00, 5.13706739e-01],
                [6.68381555e03, 3.93703919e-01, 1.00000000e00, 8.33401857e-01],
                [7.03528948e03, 4.18834672e-01, -7.00000000e00, 8.25361396e-01],
                [7.22502692e02, 6.74602942e-01, 1.30000000e01, 4.69285886e-01],
                [3.79186512e03, 3.14870790e-01, -2.00000000e00, 3.39400374e-01],
                [3.57083646e03, 3.02095107e-01, 5.00000000e00, 7.63033613e-01],
                [1.89363793e03, 7.75612911e-01, -3.10000000e01, 5.76358368e-01],
                [8.53796288e01, 2.25925272e-01, 2.00000000e01, 7.33278057e-01],
                [1.11356874e02, 3.80292354e-01, -3.10000000e01, 9.67799821e-01],
                [6.37369053e03, 4.38718471e-01, 7.00000000e00, 7.83407171e-01],
                [9.02923735e02, 3.30652687e-01, 2.00000000e00, 2.64152328e-01],
                [3.36754875e03, 3.56949671e-01, -2.00000000e01, 5.15276346e-01],
                [1.03332203e04, 2.62186281e-01, 2.50000000e01, 8.87060785e-01],
                [9.31937866e03, 6.70391986e-01, 1.70000000e01, 3.31601560e-01],
                [9.73757965e03, 3.42668451e-01, -6.00000000e00, 8.03204477e-01],
                [1.81247465e03, 5.67633995e-01, 2.50000000e01, 6.16096577e-01],
                [3.37970668e03, 4.09053976e-01, -1.10000000e01, 3.54009268e-01],
                [2.57931155e03, 2.02820359e-01, -9.00000000e00, 7.47890004e-01],
                [5.23750762e03, 3.43388121e-01, 6.00000000e00, 1.78981578e-01],
                [5.80278829e03, 6.81346173e-01, -1.90000000e01, 3.30468136e-01],
                [4.32538740e03, 4.38472987e-01, -9.00000000e00, 3.06929868e-01],
                [7.92003322e03, 2.52150459e-01, 5.00000000e00, 3.06943931e-01],
                [6.86734381e03, 7.65347750e-01, -2.10000000e01, 3.46441370e-01],
                [7.03387487e03, 5.78370113e-01, -8.00000000e00, 3.49917130e-01],
                [1.59191827e03, 5.80570240e-01, -3.00000000e01, 9.67471070e-01],
                [7.96455587e03, 7.37959437e-01, 2.20000000e01, 4.22806282e-01],
                [6.84296295e03, 7.41153119e-01, 2.00000000e00, 4.00339446e-01],
                [3.18152862e03, 7.09388822e-01, -2.70000000e01, 7.60731035e-01],
                [4.00933199e03, 4.32884681e-01, -2.00000000e00, 5.15912489e-01],
                [1.05466821e04, 3.61790803e-01, -3.10000000e01, 5.44018502e-01],
                [3.67613882e03, 4.78936498e-01, -8.00000000e00, 8.46869599e-01],
                [3.66387127e03, 6.38956082e-01, 1.50000000e01, 2.21956315e-01],
                [6.54645505e03, 4.95151896e-01, 4.00000000e00, 5.67049349e-01],
                [6.59701346e03, 4.17658449e-01, -1.10000000e01, 1.35085594e-01],
                [1.42454308e02, 5.46695965e-01, 4.00000000e00, 3.28233912e-01],
                [6.12804906e03, 5.72454647e-01, 2.10000000e01, 3.15649206e-01],
                [8.29628439e03, 7.67547310e-01, -2.20000000e01, 4.31428808e-01],
                [1.01333420e04, 5.60492153e-01, 1.90000000e01, 3.97184985e-01],
                [7.49941382e03, 4.28172250e-01, -2.00000000e01, 3.83476277e-01],
                [1.23968276e03, 7.42206256e-01, 2.00000000e00, 9.97941067e-01],
                [2.63074457e03, 6.24456033e-01, -2.60000000e01, 6.18883619e-01],
                [4.46923785e03, 4.49730386e-01, -5.00000000e00, 4.37005901e-01],
                [6.74251254e03, 4.66519934e-01, 2.20000000e01, 5.71398492e-01],
                [1.01847666e03, 7.79298437e-01, -8.00000000e00, 9.31566994e-01],
                [4.16381865e03, 7.58886947e-01, 9.00000000e00, 8.05433111e-01],
                [3.43475022e03, 2.03781370e-01, -6.00000000e00, 5.23531260e-01],
                [1.03620982e04, 6.90653999e-01, -3.20000000e01, 2.33774177e-01],
                [1.03392376e04, 4.10239058e-01, -6.00000000e00, 1.65741493e-01],
                [7.93078289e03, 4.30426237e-01, -1.90000000e01, 1.02083712e-01],
                [5.52270940e03, 3.70786595e-01, 2.40000000e01, 9.14871051e-01],
                [1.75467217e03, 5.56581777e-01, 1.30000000e01, 2.50769562e-01],
                [1.01280026e04, 3.02448636e-01, 1.80000000e01, 7.69138095e-01],
                [9.83403928e03, 3.20861473e-01, -0.00000000e00, 9.80701420e-01],
                [9.41526423e03, 3.25447170e-01, 2.40000000e01, 6.24895797e-01],
                [5.44479785e02, 5.25627558e-01, 1.90000000e01, 8.68459216e-01],
                [8.26706222e03, 2.59790650e-01, -7.00000000e00, 8.39453591e-01],
                [1.12968949e03, 3.80569067e-01, 1.00000000e00, 9.47482908e-01],
                [9.65876311e03, 6.67991311e-01, -1.70000000e01, 7.64062436e-01],
                [6.27157302e03, 4.81900338e-01, -1.00000000e01, 4.68927208e-01],
                [1.05409415e04, 7.54325902e-01, -3.30000000e01, 3.77184187e-01],
                [4.57295935e03, 6.14443065e-01, 9.00000000e00, 5.74757055e-01],
                [6.71923958e03, 2.66842294e-01, -1.50000000e01, 3.91366852e-01],
                [8.28136927e03, 4.59759841e-01, -9.00000000e00, 9.50319461e-01],
                [2.77173296e03, 5.05526298e-01, -1.10000000e01, 1.78421773e-01],
                [6.81592462e03, 7.19875381e-01, 1.70000000e01, 2.77052770e-01],
                [8.82030214e03, 7.33746828e-01, -1.90000000e01, 4.62923363e-01],
                [5.56128450e03, 2.30904516e-01, 2.00000000e00, 5.94635486e-01],
                [4.52840746e03, 7.27626387e-01, -2.20000000e01, 6.26115124e-01],
                [5.66474041e03, 5.99662607e-01, -1.70000000e01, 8.56962564e-01],
                [1.00916946e04, 5.33175666e-01, 9.00000000e00, 3.69864566e-01],
                [1.06602514e04, 7.32629434e-01, -4.00000000e00, 8.24385024e-01],
                [7.15741285e03, 4.34917763e-01, -1.00000000e01, 3.76595345e-01],
                [1.06680000e04, 7.80000000e-01, 2.50000000e01, 1.00000000e00],
                [0.00000000e00, 2.00000000e-01, 2.50000000e01, 1.00000000e00],
                [1.06680000e04, 7.80000000e-01, -3.50000000e01, 1.00000000e-01],
                [0.00000000e00, 2.00000000e-01, -3.50000000e01, 1.00000000e-01],
            ]
        )
        yt = np.array(
            [
                [172.38],
                [52.12],
                [59.8],
                [293.44],
                [360.96],
                [62.97],
                [159.57],
                [31.59],
                [28.8],
                [37.62],
                [151.4],
                [33.53],
                [106.9],
                [145.96],
                [51.11],
                [74.42],
                [30.09],
                [40.13],
                [102.51],
                [105.78],
                [90.17],
                [145.7],
                [58.85],
                [158.71],
                [66.36],
                [49.01],
                [208.84],
                [187.64],
                [226.76],
                [50.7],
                [45.92],
                [52.69],
                [78.37],
                [33.97],
                [69.81],
                [21.01],
                [54.13],
                [138.64],
                [279.27],
                [134.63],
                [79.9],
                [113.24],
                [91.01],
                [101.65],
                [47.99],
                [86.75],
                [69.16],
                [31.45],
                [95.33],
                [72.74],
                [59.65],
                [133.96],
                [47.39],
                [59.57],
                [203.43],
                [83.28],
                [69.88],
                [134.15],
                [105.89],
                [17.64],
                [78.76],
                [40.43],
                [109.9],
                [61.23],
                [75.51],
                [39.31],
                [124.63],
                [31.18],
                [39.18],
                [43.65],
                [138.64],
                [118.15],
                [123.19],
                [93.28],
                [172.09],
                [26.05],
                [59.03],
                [36.44],
                [46.67],
                [90.29],
                [75.55],
                [154.98],
                [29.39],
                [202.56],
                [177.87],
                [50.5],
                [58.31],
                [71.72],
                [82.81],
                [159.67],
                [78.31],
                [62.59],
                [60.36],
                [179.92],
                [74.41],
                [31.37],
                [70.7],
                [55.8],
                [298.7],
                [35.61],
                [78.94],
                [21.57],
                [76.99],
                [82.15],
                [116.02],
                [173.91],
                [170.63],
                [44.4],
                [49.08],
                [78.25],
                [130.97],
                [27.69],
                [111.04],
                [65.7],
                [68.75],
                [320.9],
                [117.77],
                [125.72],
                [133.93],
                [227.25],
                [148.8],
                [38.68],
                [47.64],
                [47.16],
                [126.55],
                [192.32],
                [34.9],
                [66.28],
                [36.82],
                [62.68],
                [20.59],
                [37.35],
                [51.86],
                [62.89],
                [112.15],
                [45.18],
                [65.2],
                [29.09],
                [66.96],
                [60.3],
                [112.01],
                [108.87],
                [42.19],
                [102.98],
                [57.72],
                [97.83],
                [189.07],
                [63.51],
                [218.17],
                [41.96],
                [39.59],
                [41.81],
                [133.48],
                [109.4],
                [90.84],
                [33.48],
                [74.25],
                [112.19],
                [108.68],
                [134.85],
                [153.94],
                [42.37],
                [152.75],
                [109.85],
                [57.69],
                [132.66],
                [59.81],
                [71.87],
                [84.89],
                [69.87],
                [31.48],
                [188.86],
                [67.48],
                [112.92],
                [97.09],
                [74.23],
                [29.91],
                [73.32],
                [115.0],
                [32.91],
                [34.12],
                [26.98],
                [171.39],
                [79.4],
                [64.1],
                [46.85],
                [82.51],
                [95.8],
                [74.89],
                [75.32],
                [16.98],
                [25.56],
                [59.01],
                [93.19],
                [32.1],
                [47.64],
                [142.49],
                [138.1],
                [36.72],
                [73.63],
                [260.13],
                [90.57],
                [23.62],
                [17.06],
            ]
        )
        x = np.array(
            [
                [1.9e3, 2.5e-1, 8.00000000e00, 3.7e-01],
                [6.8e3, 7.5e-01, 1.20000000e01, 1.2e-01],
                [2.85e03, 2.2e-01, 1.30000000e01, 1.33e-01],
                [4.6e03, 2.1e-01, -1.00000000e00, 8.2e-01],
            ]
        )
        sm = SGP(
            n_start=25,
            hyper_opt="Cobyla",
            random_state=np.random.RandomState(0),
            inducing_method="kmeans",
        )
        sm.set_training_values(xt, yt)
        sm.train()
        # predictions
        sm.predict_values(x)  # predictive mean
        sm.predict_variances(x)  # predictive variance
        sm = KRG(n_start=25, hyper_opt="Cobyla", random_state=np.random.RandomState(0))
        sm.set_training_values(xt, yt)
        sm.train()
        # predictions
        sm.predict_values(x)  # predictive mean
        sm.predict_variances(x)  # predictive variance
        sm.predict_derivatives(x, 0)  # predictive variance
        self.assertLess(
            np.mean(
                np.abs(
                    sm.predict_variances(x)
                    - np.array(
                        [
                            [3737.78504444],
                            [3731.89718163],
                            [2259.84680233],
                            [3708.19785073],
                        ]
                    )
                )
            ),
            1.0e-2,
        )
        self.assertLess(
            np.mean(
                np.abs(
                    sm.predict_values(x)
                    - np.array(
                        [
                            [91.22522684],
                            [90.78056507],
                            [71.31463571],
                            [108.17121769],
                        ]
                    )
                )
            ),
            1.0e-2,
        )

    def test_check_training_numerically(self):
        ndim = 2
        ndoe = 20  # int(10*ndim)
        # Define the function
        fun = Rosenbrock(ndim=ndim)

        # Construction of the DOE
        # in order to have the always same LHS points, random_state=1
        sampling = LHS(xlimits=fun.xlimits, criterion="ese", random_state=1)
        xt = sampling(ndoe)
        # Compute the outputs
        yt = fun(xt)

        # Construction of the validation points
        ntest = 200  # 500
        sampling = LHS(xlimits=fun.xlimits, criterion="ese", random_state=1)
        xtest = sampling(ntest)
        ytest = fun(xtest)

        # The variable 'theta0' is a list of length ndim.
        t = KRG(theta0=[1e-2] * ndim, print_prediction=False, corr="pow_exp")
        t.set_training_values(xt, yt[:, 0])

        t.train()

        # Prediction of the validation points
        t.predict_values(xtest)
        print("Kriging,  err: " + str(compute_rms_error(t, xtest, ytest)))
        print("R is ill-conditioned?", t.is_training_ill_conditioned())
        self.assertTrue(not (t.is_training_ill_conditioned()))
        # The variable 'theta0' is a list of length ndim.
        ndoe = 50  # int(10*ndim)
        xt = sampling(ndoe)
        # Compute the outputs
        yt = fun(xt)
        t = KRG(theta0=[1e-2] * ndim, print_prediction=False, corr="squar_exp")
        t.set_training_values(xt, yt[:, 0])

        t.train()

        # Prediction of the validation points
        t.predict_values(xtest)
        print("Kriging,  err: " + str(compute_rms_error(t, xtest, ytest)))
        print("R is ill-conditioned?", t.is_training_ill_conditioned())
        self.assertTrue(t.is_training_ill_conditioned())


if __name__ == "__main__":
    unittest.main()
